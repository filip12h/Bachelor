###INSTRUCTIONS FOR USER

This program contains four .hpp (pathDecomposition, cutSizeBisection, 
oneHelpfulSet and redBlackEdges) files and one .cpp file - main.cpp which allows
you to choose whether you want to make path decomposition, cut of a graph, find
1-helpful set in cutted graph or find set of vertices in red-black graph.

###AT FIRST, MAKE SURE YOU HAVE ACCOMPLISHED THESE 3 PREREQUISITIES:

  1. download ba-graph library. You can find it on 
    https://bitbucket.org/relatko/ba-graph/commits/67a1f4e718bd4aaf5a389aa54097db227800f27f.
    If you have troubles with current version, try download version from
    05/07/2019.

  2. your compiler should be at least gcc-6 or higher
  
  3. in case you want to use graphs from .txt files, change absolute path in
    main.cpp to reach the destination of graph_examples

###INTERFACE

Project provides interface for path decomposition, however there is few more
  possibilities which are directly connected to the decomposition - cut of the
  graph, find at least 1-helpful set or find set in red-black graph.
  
- vector<set<Number>> pathDecomposition(Graph &graph, Factory &f);
        - returns sequence of vertices sets belonging to graph in factory f
          while it fulfils path decompositions' conditions
- pair<pair<set<Number>, set<Number>>, pair<set<Number>, set<Number>>> 
    makeBisection(Graph &graph, Factory &f);
        - returns 4 sets of vertices belonging to graph:
          - .first.first contains cut-vertices of set V0
          - .first.second contains vertices of set V0
          - .second.first contains cut-vertices of set V1
          - .second.second contains vertices of set V1
- set<Number> getHelpfulSet
    (Graph &graph, set<Number> v0, float epsilon, Factory &f);
        - returns subset of set of vertices V0 (or V1) which decreases cutsize
          after moving to V1 (V0)
        - in graph we store edges - which are important in this function
        - larger epsilon means smaller helpful set and vice versa - for more
          details see taxt of bachelor work
- set<Number> redBlackEdges(Graph &graph, multiset<pair<Number, Number>> 
    &blackEdges, float epsilon, Graph &blackGraph, Factory &f);
        - returns set of vertices which fulfills the lemma in respect to a graph
          (far details check a text in bachelor thesis)
        - in multiset blackEdges we store list of black edges
            - WARNING: order of vertices matters!
        - similarly as in getHelpfulSet, value of epsilon affects size of set
            we have to find (we skip further details)
        - blackGraph is Graph generated by elements from blackEdges
            - this variable is already used in getHelpfulSet, so eventhough it
              is redundant (we can form it from graph and blackEdges) we copy it
              as parameter to the function

###NOW, THIS IS HOW SHOULD BE INPUT LOOK LIKE

  You can put graphs in 3 ways: 
    1. "g" = generate random regular multigraph (function in ba-graph library)
      then you set number of vertices. Graph should be cubic, so every vertex
      should have 3 neighbors. Thus, from graph theory we know that number of
      vertices should be even.
        1.1. if you want to know what graph is generated, enter "y", then
          function from library ba-graph is called and incidence list is printed
        1.2. ...otherwise enter "n" (or anything else...it's same effect as "n")
    2. "f" = use graph from .txt file. The file should be in graph_examples
      folder. A format of file should be: in first row: number of vertices, 
      and then list of edges (pairs of vertices) - in every row one edge.
      Make sure that the graph is cubic. Otherwise program could have not work
      well.
        WARNING: don't forget to change absolute path
    3. "c" = use graph from command line. A format is same as in "f"-case, i.e.
      in first row: number of vertices, and then list of edges. Same conditions
  
  After setting the input graph, you can choose if path decomposition ("d"), 
    cut ("c"), 1-helpful set ("o") or red-black edges ("r") will be done. 
    If you type anything else, decomposition will be done defaultly.
  
  In o-case you have additionally set set of vertices in 1 of the sets of cut.
  In r-case you have to set which edges will be black and which will be red.
  In first row you have to set number of black edges. Then in every row will be
    1 edge = 1 pair of vertices (vertices are divided by space). 
    WARNING: order of vertices has to be same as defined. 
    
  In all algorithms you can choose its precision. In first 2 cases (d/c) in 
    range from 1 (faster, less precise) to 15 (slower, more precise). In other 2 
    cases (o/r) you can choose positive value of float epsilon so that equation 
    will be correct (true).
      - "o": (1/3 + 2*epsilon)*|V0| < cutSize
      - "r": |R| > (1/2 + epsilon)*|V|
                    
    A. If you choose path decomposition, then pathwidth and bags of 
      decomposition will be printed on output. Then you can check 
      decomposition's correctness.
      
    B. If you choose cut, then cutsize, cut-vertices and cutsets will be printed 
      on output (cut-vertices are parameter for path decomposition)
      
    C. If you choose 1-helpful set, set of vertices will be printed on output.
      (possibly empty set, too)
    
    D. If you choose red-black edges, set of vertices will be printed on output.
      (possibly empty set, too)
    
  After path decomposition, cut, 1-helpful set or red-black edges is over, you 
    can choose if you want to quit or continue. (enter "quit" or anything else, 
    for example "no")
    - when continue, you can choose whether you use new graph or previous (y/n)
    
HAVE A GOOD TIME WITH THIS PROJECT :)

     
       
    
  